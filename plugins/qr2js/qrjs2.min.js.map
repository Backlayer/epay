{"version":3,"sources":["qrjs2.js"],"names":["root","document","length","VERSIONS","MODE_NUMERIC","MODE_ALPHANUMERIC","MODE_OCTET","MODE_KANJI","NUMERIC_REGEXP","ALPHANUMERIC_REGEXP","ALPHANUMERIC_OUT_REGEXP","ECCLEVEL_L","ECCLEVEL_M","ECCLEVEL_Q","ECCLEVEL_H","GF256_MAP","GF256_INVMAP","i1","push","v","GF256_GENPOLY","i2","prevpoly","poly","j1","ALPHANUMERIC_MAP","j","needsverinfo","ver","a","nbits","b","i","ndatabits","ecclevel","mode","newdata","getmaxdatalen","ndatalenbits","encode","data","maxbuflen","datalen","remaining","calculateecc","genpoly","modulus","polylen","genpolylen","k","quotient","getsizebyver","blit","slice","augumentbch","p","q","dir","reserved","row","maskdata","matrix","mask","score","nblacks","PENALTY_TWOBYTWO","n","maskf","putformatinfo","buf","code","QRCode","bestmask","bestscore","c","ECCLEVELS","evaluatematrix","evaluategroup","match","groups","validatedata","generate","createElement","k2","j2","frag","createContextualFragment","e","nextrow","appendChild","j3","options","fillcolor","modsize","Math","margin","max","abs","qrcodeId","_generate","createElementNS","style","pack","x","nlenbits","augumenteccs","substring","nblocks","parseInt","subsizes","subsize0","charAt","subsize","i3","result","eccs","pivot","aligns","minj","maxj","nitemsperblock","i4","i5","jj","h","MASKFUNCS","bits","r","PENALTY_DENSITY","m","createRect","fg","ii","putdata","setAttributeNS","xo","yo","settings","MODES","numeric","alphanumeric","octet","L","M","Q","H","canvas","width","height","context","getContext","toUpperCase","fillStyle","textcolor","ch"],"mappings":"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","file":"qrjs2.min.js","sourcesContent":["/*!\n * @see {@link https://github.com/englishextra/qrjs2}\n * modified qr.js -- QR code generator in Javascript (revision 2011-01-19)\n * Written by Kang Seonghoon <public+qrjs@mearie.org>.\n * v0.0.20110119\n * This source code is in the public domain; if your jurisdiction does not\n * recognize the public domain the terms of Creative Commons CC0 license\n * apply. In the other words, you can always do what you want.\n * added options properties: fillcolor and textcolor\n * svg now works in Edge 13 and IE 11\n * @see {@link https://gist.github.com/englishextra/b46969e3382ef737c611bb59d837220b}\n * @see {@link https://github.com/lifthrasiir/qr.js/blob/v0.0.20110119/qr.js}\n * @params {String} data\n * @params {Object} settings object\n * element = QRCode.generateSVG(data, settings)\n * passes jshint with suppressing comments\n */\n/*jslint browser: true */\n/*jslint node: true */\n/*jshint bitwise: false */\n/*jshint shadow: true */\n/*jshint sub:true */\n/*jshint -W041 */\n(function (root, document) {\n\t\"use strict\";\n\tvar length = \"length\";\n\tvar VERSIONS = [null, [[10, 7, 17, 13], [1, 1, 1, 1], []], [[16, 10, 28, 22], [1, 1, 1, 1], [4, 16]], [[26, 15, 22, 18], [1, 1, 2, 2], [4, 20]], [[18, 20, 16, 26], [2, 1, 4, 2], [4, 24]], [[24, 26, 22, 18], [2, 1, 4, 4], [4, 28]], [[16, 18, 28, 24], [4, 2, 4, 4], [4, 32]], [[18, 20, 26, 18], [4, 2, 5, 6], [4, 20, 36]], [[22, 24, 26, 22], [4, 2, 6, 6], [4, 22, 40]], [[22, 30, 24, 20], [5, 2, 8, 8], [4, 24, 44]], [[26, 18, 28, 24], [5, 4, 8, 8], [4, 26, 48]], [[30, 20, 24, 28], [5, 4, 11, 8], [4, 28, 52]], [[22, 24, 28, 26], [8, 4, 11, 10], [4, 30, 56]], [[22, 26, 22, 24], [9, 4, 16, 12], [4, 32, 60]], [[24, 30, 24, 20], [9, 4, 16, 16], [4, 24, 44, 64]], [[24, 22, 24, 30], [10, 6, 18, 12], [4, 24, 46, 68]], [[28, 24, 30, 24], [10, 6, 16, 17], [4, 24, 48, 72]], [[28, 28, 28, 28], [11, 6, 19, 16], [4, 28, 52, 76]], [[26, 30, 28, 28], [13, 6, 21, 18], [4, 28, 54, 80]], [[26, 28, 26, 26], [14, 7, 25, 21], [4, 28, 56, 84]], [[26, 28, 28, 30], [16, 8, 25, 20], [4, 32, 60, 88]], [[26, 28, 30, 28], [17, 8, 25, 23], [4, 26, 48, 70, 92]], [[28, 28, 24, 30], [17, 9, 34, 23], [4, 24, 48, 72, 96]], [[28, 30, 30, 30], [18, 9, 30, 25], [4, 28, 52, 76, 100]], [[28, 30, 30, 30], [20, 10, 32, 27], [4, 26, 52, 78, 104]], [[28, 26, 30, 30], [21, 12, 35, 29], [4, 30, 56, 82, 108]], [[28, 28, 30, 28], [23, 12, 37, 34], [4, 28, 56, 84, 112]], [[28, 30, 30, 30], [25, 12, 40, 34], [4, 32, 60, 88, 116]], [[28, 30, 30, 30], [26, 13, 42, 35], [4, 24, 48, 72, 96, 120]], [[28, 30, 30, 30], [28, 14, 45, 38], [4, 28, 52, 76, 100, 124]], [[28, 30, 30, 30], [29, 15, 48, 40], [4, 24, 50, 76, 102, 128]], [[28, 30, 30, 30], [31, 16, 51, 43], [4, 28, 54, 80, 106, 132]], [[28, 30, 30, 30], [33, 17, 54, 45], [4, 32, 58, 84, 110, 136]], [[28, 30, 30, 30], [35, 18, 57, 48], [4, 28, 56, 84, 112, 140]], [[28, 30, 30, 30], [37, 19, 60, 51], [4, 32, 60, 88, 116, 144]], [[28, 30, 30, 30], [38, 19, 63, 53], [4, 28, 52, 76, 100, 124, 148]], [[28, 30, 30, 30], [40, 20, 66, 56], [4, 22, 48, 74, 100, 126, 152]], [[28, 30, 30, 30], [43, 21, 70, 59], [4, 26, 52, 78, 104, 130, 156]], [[28, 30, 30, 30], [45, 22, 74, 62], [4, 30, 56, 82, 108, 134, 160]], [[28, 30, 30, 30], [47, 24, 77, 65], [4, 24, 52, 80, 108, 136, 164]], [[28, 30, 30, 30], [49, 25, 81, 68], [4, 28, 56, 84, 112, 140, 168]]];\n\tvar MODE_TERMINATOR = 0;\n\tvar MODE_NUMERIC = 1,\n\tMODE_ALPHANUMERIC = 2,\n\tMODE_OCTET = 4,\n\tMODE_KANJI = 8;\n\tvar NUMERIC_REGEXP = /^\\d*$/;\n\tvar ALPHANUMERIC_REGEXP = /^[A-Za-z0-9 $%*+\\-./:]*$/;\n\tvar ALPHANUMERIC_OUT_REGEXP = /^[A-Z0-9 $%*+\\-./:]*$/;\n\n\tvar ECCLEVEL_L = 1,\n\tECCLEVEL_M = 0,\n\tECCLEVEL_Q = 3,\n\tECCLEVEL_H = 2;\n\tvar GF256_MAP = [],\n\tGF256_INVMAP = [-1];\n\tfor (var i1 = 0, v = 1; i1 < 255; ++i1) {\n\t\tGF256_MAP.push(v);\n\t\tGF256_INVMAP[v] = i1;\n\t\tv = (v * 2) ^ (v >= 128 ? 0x11d : 0);\n\t}\n\tvar GF256_GENPOLY = [[]];\n\tfor (var i2 = 0; i2 < 30; ++i2) {\n\t\tvar prevpoly = GF256_GENPOLY[i2],\n\t\tpoly = [];\n\t\tfor (var j1 = 0; j1 <= i2; ++j1) {\n\t\t\tvar a = (j1 < i2 ? GF256_MAP[prevpoly[j1]] : 0);\n\t\t\tvar b = GF256_MAP[(i2 + (prevpoly[j1 - 1] || 0)) % 255];\n\t\t\tpoly.push(GF256_INVMAP[a ^ b]);\n\t\t}\n\t\tGF256_GENPOLY.push(poly);\n\t}\n\tvar ALPHANUMERIC_MAP = {};\n\tfor (var i = 0; i < 45; ++i) {\n\t\tALPHANUMERIC_MAP[\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\".charAt(i)] = i;\n\t}\n\tvar MASKFUNCS = [function (i, j) {\n\t\t\treturn (i + j) % 2 === 0;\n\t\t}, function (i) {\n\t\t\treturn i % 2 === 0;\n\t\t}, function (i, j) {\n\t\t\treturn j % 3 === 0;\n\t\t}, function (i, j) {\n\t\t\treturn (i + j) % 3 === 0;\n\t\t}, function (i, j) {\n\t\t\treturn (((i / 2) | 0) + ((j / 3) | 0)) % 2 === 0;\n\t\t}, function (i, j) {\n\t\t\treturn (i * j) % 2 + (i * j) % 3 === 0;\n\t\t}, function (i, j) {\n\t\t\treturn ((i * j) % 2 + (i * j) % 3) % 2 === 0;\n\t\t}, function (i, j) {\n\t\t\treturn ((i + j) % 2 + (i * j) % 3) % 2 === 0;\n\t\t}\n\t];\n\tvar needsverinfo = function (ver) {\n\t\treturn ver > 6;\n\t};\n\tvar getsizebyver = function (ver) {\n\t\treturn 4 * ver + 17;\n\t};\n\tvar nfullbits = function (ver) {\n\t\tvar v = VERSIONS[ver];\n\t\tvar nbits = 16 * ver * ver + 128 * ver + 64;\n\t\tif (needsverinfo(ver)) {\n\t\t\tnbits -= 36;\n\t\t}\n\t\tif (v[2][length]) {\n\t\t\tnbits -= 25 * v[2][length] * v[2][length] - 10 * v[2][length] - 55;\n\t\t}\n\t\treturn nbits;\n\t};\n\tvar ndatabits = function (ver, ecclevel) {\n\t\tvar nbits = nfullbits(ver) & ~7;\n\t\tvar v = VERSIONS[ver];\n\t\tnbits -= 8 * v[0][ecclevel] * v[1][ecclevel];\n\t\treturn nbits;\n\t};\n\tvar ndatalenbits = function (ver, mode) {\n\t\tswitch (mode) {\n\t\tcase MODE_NUMERIC:\n\t\t\treturn (ver < 10 ? 10 : ver < 27 ? 12 : 14);\n\t\tcase MODE_ALPHANUMERIC:\n\t\t\treturn (ver < 10 ? 9 : ver < 27 ? 11 : 13);\n\t\tcase MODE_OCTET:\n\t\t\treturn (ver < 10 ? 8 : 16);\n\t\tcase MODE_KANJI:\n\t\t\treturn (ver < 10 ? 8 : ver < 27 ? 10 : 12);\n\t\t}\n\t};\n\tvar getmaxdatalen = function (ver, mode, ecclevel) {\n\t\tvar nbits = ndatabits(ver, ecclevel) - 4 - ndatalenbits(ver, mode);\n\t\tswitch (mode) {\n\t\tcase MODE_NUMERIC:\n\t\t\treturn ((nbits / 10) | 0) * 3 + (nbits % 10 < 4 ? 0 : nbits % 10 < 7 ? 1 : 2);\n\t\tcase MODE_ALPHANUMERIC:\n\t\t\treturn ((nbits / 11) | 0) * 2 + (nbits % 11 < 6 ? 0 : 1);\n\t\tcase MODE_OCTET:\n\t\t\treturn (nbits / 8) | 0;\n\t\tcase MODE_KANJI:\n\t\t\treturn (nbits / 13) | 0;\n\t\t}\n\t};\n\tvar validatedata = function (mode, data) {\n\t\tswitch (mode) {\n\t\tcase MODE_NUMERIC:\n\t\t\tif (!data.match(NUMERIC_REGEXP)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn data;\n\t\tcase MODE_ALPHANUMERIC:\n\t\t\tif (!data.match(ALPHANUMERIC_REGEXP)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn data.toUpperCase();\n\t\tcase MODE_OCTET:\n\t\t\tif (typeof data === \"string\") {\n\t\t\t\tvar newdata = [];\n\t\t\t\tfor (var i = 0; i < data[length]; ++i) {\n\t\t\t\t\tvar ch = data.charCodeAt(i);\n\t\t\t\t\tif (ch < 0x80) {\n\t\t\t\t\t\tnewdata.push(ch);\n\t\t\t\t\t} else if (ch < 0x800) {\n\t\t\t\t\t\tnewdata.push(0xc0 | (ch >> 6), 0x80 | (ch & 0x3f));\n\t\t\t\t\t} else if (ch < 0x10000) {\n\t\t\t\t\t\tnewdata.push(0xe0 | (ch >> 12), 0x80 | ((ch >> 6) & 0x3f), 0x80 | (ch & 0x3f));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewdata.push(0xf0 | (ch >> 18), 0x80 | ((ch >> 12) & 0x3f), 0x80 | ((ch >> 6) & 0x3f), 0x80 | (ch & 0x3f));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn newdata;\n\t\t\t} else {\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t};\n\tvar encode = function (ver, mode, data, maxbuflen) {\n\t\tvar buf = [];\n\t\tvar bits = 0,\n\t\tremaining = 8;\n\t\tvar datalen = data[length];\n\t\tvar pack = function (x, n) {\n\t\t\tif (n >= remaining) {\n\t\t\t\tbuf.push(bits | (x >> (n -= remaining)));\n\t\t\t\twhile (n >= 8) {\n\t\t\t\t\tbuf.push((x >> (n -= 8)) & 255);\n\t\t\t\t}\n\t\t\t\tbits = 0;\n\t\t\t\tremaining = 8;\n\t\t\t}\n\t\t\tif (n > 0) {\n\t\t\t\tbits |= (x & ((1 << n) - 1)) << (remaining -= n);\n\t\t\t}\n\t\t};\n\t\tvar nlenbits = ndatalenbits(ver, mode);\n\t\tpack(mode, 4);\n\t\tpack(datalen, nlenbits);\n\t\tswitch (mode) {\n\t\tcase MODE_NUMERIC:\n\t\t\tfor (var i = 2; i < datalen; i += 3) {\n\t\t\t\tpack(parseInt(data.substring(i - 2, i + 1), 10), 10);\n\t\t\t}\n\t\t\tpack(parseInt(data.substring(i - 2), 10), [0, 4, 7][datalen % 3]);\n\t\t\tbreak;\n\t\tcase MODE_ALPHANUMERIC:\n\t\t\tfor (var i2 = 1; i2 < datalen; i2 += 2) {\n\t\t\t\tpack(ALPHANUMERIC_MAP[data.charAt(i2 - 1)] * 45 +\n\t\t\t\t\tALPHANUMERIC_MAP[data.charAt(i2)], 11);\n\t\t\t}\n\t\t\tif (datalen % 2 === 1) {\n\t\t\t\tpack(ALPHANUMERIC_MAP[data.charAt(i2 - 1)], 6);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase MODE_OCTET:\n\t\t\tfor (var i3 = 0; i3 < datalen; ++i3) {\n\t\t\t\tpack(data[i3], 8);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tpack(MODE_TERMINATOR, 4);\n\t\tif (remaining < 8) {\n\t\t\tbuf.push(bits);\n\t\t}\n\t\twhile (buf[length] + 1 < maxbuflen) {\n\t\t\tbuf.push(0xec, 0x11);\n\t\t}\n\t\tif (buf[length] < maxbuflen) {\n\t\t\tbuf.push(0xec);\n\t\t}\n\t\treturn buf;\n\t};\n\tvar calculateecc = function (poly, genpoly) {\n\t\tvar modulus = poly.slice(0);\n\t\tvar polylen = poly[length],\n\t\tgenpolylen = genpoly[length];\n\t\tfor (var k = 0; k < genpolylen; ++k) {\n\t\t\tmodulus.push(0);\n\t\t}\n\t\tfor (var i = 0; i < polylen; ) {\n\t\t\tvar quotient = GF256_INVMAP[modulus[i++]];\n\t\t\tif (quotient >= 0) {\n\t\t\t\tfor (var j = 0; j < genpolylen; ++j) {\n\t\t\t\t\tmodulus[i + j] ^= GF256_MAP[(quotient + genpoly[j]) % 255];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn modulus.slice(polylen);\n\t};\n\tvar augumenteccs = function (poly, nblocks, genpoly) {\n\t\tvar subsizes = [];\n\t\tvar subsize = (poly[length] / nblocks) | 0,\n\t\tsubsize0 = 0;\n\t\tvar pivot = nblocks - poly[length] % nblocks;\n\t\tfor (var i = 0; i < pivot; ++i) {\n\t\t\tsubsizes.push(subsize0);\n\t\t\tsubsize0 += subsize;\n\t\t}\n\t\tfor (var i2 = pivot; i2 < nblocks; ++i2) {\n\t\t\tsubsizes.push(subsize0);\n\t\t\tsubsize0 += subsize + 1;\n\t\t}\n\t\tsubsizes.push(subsize0);\n\t\tvar eccs = [];\n\t\tfor (var i3 = 0; i3 < nblocks; ++i3) {\n\t\t\teccs.push(calculateecc(poly.slice(subsizes[i3], subsizes[i3 + 1]), genpoly));\n\t\t}\n\t\tvar result = [];\n\t\tvar nitemsperblock = (poly[length] / nblocks) | 0;\n\t\tfor (var i4 = 0; i4 < nitemsperblock; ++i4) {\n\t\t\tfor (var j = 0; j < nblocks; ++j) {\n\t\t\t\tresult.push(poly[subsizes[j] + i4]);\n\t\t\t}\n\t\t}\n\t\tfor (var j2 = pivot; j2 < nblocks; ++j2) {\n\t\t\tresult.push(poly[subsizes[j2 + 1] - 1]);\n\t\t}\n\t\tfor (var i5 = 0; i5 < genpoly[length]; ++i5) {\n\t\t\tfor (var j3 = 0; j3 < nblocks; ++j3) {\n\t\t\t\tresult.push(eccs[j3][i5]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t};\n\tvar augumentbch = function (poly, p, genpoly, q) {\n\t\tvar modulus = poly << q;\n\t\tfor (var i = p - 1; i >= 0; --i) {\n\t\t\tif ((modulus >> (q + i)) & 1) {\n\t\t\t\tmodulus ^= genpoly << i;\n\t\t\t}\n\t\t}\n\t\treturn (poly << q) | modulus;\n\t};\n\tvar makebasematrix = function (ver) {\n\t\tvar v = VERSIONS[ver],\n\t\tn = getsizebyver(ver);\n\t\tvar matrix = [],\n\t\treserved = [];\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tmatrix.push([]);\n\t\t\treserved.push([]);\n\t\t}\n\t\tvar blit = function (y, x, h, w, bits) {\n\t\t\tfor (var i = 0; i < h; ++i) {\n\t\t\t\tfor (var j = 0; j < w; ++j) {\n\t\t\t\t\tmatrix[y + i][x + j] = (bits[i] >> j) & 1;\n\t\t\t\t\treserved[y + i][x + j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tblit(0, 0, 9, 9, [0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x17f, 0x00, 0x40]);\n\t\tblit(n - 8, 0, 8, 9, [0x100, 0x7f, 0x41, 0x5d, 0x5d, 0x5d, 0x41, 0x7f]);\n\t\tblit(0, n - 8, 9, 8, [0xfe, 0x82, 0xba, 0xba, 0xba, 0x82, 0xfe, 0x00, 0x00]);\n\t\tfor (var i2 = 9; i2 < n - 8; ++i2) {\n\t\t\tmatrix[6][i2] = matrix[i2][6] = ~i2 & 1;\n\t\t\treserved[6][i2] = reserved[i2][6] = 1;\n\t\t}\n\t\tvar aligns = v[2],\n\t\tm = aligns[length];\n\t\tfor (var i3 = 0; i3 < m; ++i3) {\n\t\t\tvar minj = (i3 === 0 || i3 === m - 1 ? 1 : 0),\n\t\t\tmaxj = (i3 === 0 ? m - 1 : m);\n\t\t\tfor (var j = minj; j < maxj; ++j) {\n\t\t\t\tblit(aligns[i3], aligns[j], 5, 5, [0x1f, 0x11, 0x15, 0x11, 0x1f]);\n\t\t\t}\n\t\t}\n\t\tif (needsverinfo(ver)) {\n\t\t\tvar code = augumentbch(ver, 6, 0x1f25, 12);\n\t\t\tvar k = 0;\n\t\t\tfor (var i4 = 0; i4 < 6; ++i4) {\n\t\t\t\tfor (var j2 = 0; j2 < 3; ++j2) {\n\t\t\t\t\tmatrix[i4][(n - 11) + j2] = matrix[(n - 11) + j2][i4] = (code >> k++) & 1;\n\t\t\t\t\treserved[i4][(n - 11) + j2] = reserved[(n - 11) + j2][i4] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tmatrix: matrix,\n\t\t\treserved: reserved\n\t\t};\n\t};\n\tvar putdata = function (matrix, reserved, buf) {\n\t\tvar n = matrix[length];\n\t\tvar k = 0,\n\t\tdir = -1;\n\t\tfor (var i = n - 1; i >= 0; i -= 2) {\n\t\t\tif (i === 6) {\n\t\t\t\t--i;\n\t\t\t}\n\t\t\tvar jj = (dir < 0 ? n - 1 : 0);\n\t\t\tfor (var j = 0; j < n; ++j) {\n\t\t\t\tfor (var ii = i; ii > i - 2; --ii) {\n\t\t\t\t\tif (!reserved[jj][ii]) {\n\t\t\t\t\t\tmatrix[jj][ii] = (buf[k >> 3] >> (~k & 7)) & 1;\n\t\t\t\t\t\t++k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tjj += dir;\n\t\t\t}\n\t\t\tdir = -dir;\n\t\t}\n\t\treturn matrix;\n\t};\n\tvar maskdata = function (matrix, reserved, mask) {\n\t\tvar maskf = MASKFUNCS[mask];\n\t\tvar n = matrix[length];\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tfor (var j = 0; j < n; ++j) {\n\t\t\t\tif (!reserved[i][j]) {\n\t\t\t\t\tmatrix[i][j] ^= maskf(i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn matrix;\n\t};\n\tvar putformatinfo = function (matrix, reserved, ecclevel, mask) {\n\t\tvar n = matrix[length];\n\t\tvar code = augumentbch((ecclevel << 3) | mask, 5, 0x537, 10) ^ 0x5412;\n\t\tfor (var i = 0; i < 15; ++i) {\n\t\t\tvar r = [0, 1, 2, 3, 4, 5, 7, 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1][i];\n\t\t\tvar c = [n - 1, n - 2, n - 3, n - 4, n - 5, n - 6, n - 7, n - 8, 7, 5, 4, 3, 2, 1, 0][i];\n\t\t\tmatrix[r][8] = matrix[8][c] = (code >> i) & 1;\n\t\t}\n\t\treturn matrix;\n\t};\n\tvar evaluatematrix = function (matrix) {\n\t\tvar PENALTY_CONSECUTIVE = 3;\n\t\tvar PENALTY_TWOBYTWO = 3;\n\t\tvar PENALTY_FINDERLIKE = 40;\n\t\tvar PENALTY_DENSITY = 10;\n\t\tvar evaluategroup = function (groups) {\n\t\t\tvar score = 0;\n\t\t\tfor (var i = 0; i < groups[length]; ++i) {\n\t\t\t\tif (groups[i] >= 5) {\n\t\t\t\t\tscore += PENALTY_CONSECUTIVE + (groups[i] - 5);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (var i2 = 5; i2 < groups[length]; i2 += 2) {\n\t\t\t\tvar p = groups[i2];\n\t\t\t\tif (\n\t\t\t\t\tgroups[i2 - 1] === p &&\n\t\t\t\t\tgroups[i2 - 2] === 3 * p &&\n\t\t\t\t\tgroups[i2 - 3] === p &&\n\t\t\t\t\tgroups[i2 - 4] === p &&\n\t\t\t\t\t(groups[i2 - 5] >= 4 * p || groups[i2 + 1] >= 4 * p)\n\t\t\t\t) {\n\t\t\t\t\tscore += PENALTY_FINDERLIKE;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn score;\n\t\t};\n\t\tvar n = matrix[length];\n\t\tvar score = 0,\n\t\tnblacks = 0;\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tvar row = matrix[i];\n\t\t\tvar groups;\n\t\t\tgroups = [0];\n\t\t\tfor (var j = 0; j < n; ) {\n\t\t\t\tvar k;\n\t\t\t\tfor (k = 0; j < n && row[j]; ++k) {\n\t\t\t\t\t++j;\n\t\t\t\t}\n\t\t\t\tgroups.push(k);\n\t\t\t\tfor (k = 0; j < n && !row[j]; ++k) {\n\t\t\t\t\t++j;\n\t\t\t\t}\n\t\t\t\tgroups.push(k);\n\t\t\t}\n\t\t\tscore += evaluategroup(groups);\n\t\t\tgroups = [0];\n\t\t\tfor (var j2 = 0; j2 < n; ) {\n\t\t\t\tvar k2;\n\t\t\t\tfor (k2 = 0; j2 < n && matrix[j2][i]; ++k2) {\n\t\t\t\t\t++j2;\n\t\t\t\t}\n\t\t\t\tgroups.push(k2);\n\t\t\t\tfor (k2 = 0; j2 < n && !matrix[j2][i]; ++k2) {\n\t\t\t\t\t++j2;\n\t\t\t\t}\n\t\t\t\tgroups.push(k2);\n\t\t\t}\n\t\t\tscore += evaluategroup(groups);\n\t\t\tvar nextrow = matrix[i + 1] || [];\n\t\t\tnblacks += row[0];\n\t\t\tfor (var j3 = 1; j3 < n; ++j3) {\n\t\t\t\tvar p = row[j3];\n\t\t\t\tnblacks += p;\n\t\t\t\tif (row[j3 - 1] === p && nextrow[j3] === p && nextrow[j3 - 1] === p) {\n\t\t\t\t\tscore += PENALTY_TWOBYTWO;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tscore += PENALTY_DENSITY * ((Math.abs(nblacks / n / n - 0.5) / 0.05) | 0);\n\t\treturn score;\n\t};\n\tvar generate = function (data, ver, mode, ecclevel, mask) {\n\t\tvar v = VERSIONS[ver];\n\t\tvar buf = encode(ver, mode, data, ndatabits(ver, ecclevel) >> 3);\n\t\tbuf = augumenteccs(buf, v[1][ecclevel], GF256_GENPOLY[v[0][ecclevel]]);\n\t\tvar result = makebasematrix(ver);\n\t\tvar matrix = result.matrix,\n\t\treserved = result.reserved;\n\t\tputdata(matrix, reserved, buf);\n\t\tif (mask < 0) {\n\t\t\tmaskdata(matrix, reserved, 0);\n\t\t\tputformatinfo(matrix, reserved, ecclevel, 0);\n\t\t\tvar bestmask = 0,\n\t\t\tbestscore = evaluatematrix(matrix);\n\t\t\tmaskdata(matrix, reserved, 0);\n\t\t\tfor (mask = 1; mask < 8; ++mask) {\n\t\t\t\tmaskdata(matrix, reserved, mask);\n\t\t\t\tputformatinfo(matrix, reserved, ecclevel, mask);\n\t\t\t\tvar score = evaluatematrix(matrix);\n\t\t\t\tif (bestscore > score) {\n\t\t\t\t\tbestscore = score;\n\t\t\t\t\tbestmask = mask;\n\t\t\t\t}\n\t\t\t\tmaskdata(matrix, reserved, mask);\n\t\t\t}\n\t\t\tmask = bestmask;\n\t\t}\n\t\tmaskdata(matrix, reserved, mask);\n\t\tputformatinfo(matrix, reserved, ecclevel, mask);\n\t\treturn matrix;\n\t};\n\tvar QRCode = {\n\t\t\"generate\": function (data, settings) {\n\t\t\tvar options = settings || {};\n\t\t\tvar MODES = {\n\t\t\t\t\"numeric\": MODE_NUMERIC,\n\t\t\t\t\"alphanumeric\": MODE_ALPHANUMERIC,\n\t\t\t\t\"octet\": MODE_OCTET\n\t\t\t};\n\t\t\tvar ECCLEVELS = {\n\t\t\t\t\"L\": ECCLEVEL_L,\n\t\t\t\t\"M\": ECCLEVEL_M,\n\t\t\t\t\"Q\": ECCLEVEL_Q,\n\t\t\t\t\"H\": ECCLEVEL_H\n\t\t\t};\n\t\t\tvar ver = options.version || -1;\n\t\t\tvar ecclevel = ECCLEVELS[(options.ecclevel || \"L\").toUpperCase()];\n\t\t\tvar mode = options.mode ? MODES[options.mode.toLowerCase()] : -1;\n\t\t\tvar mask = \"mask\" in options ? options.mask : -1;\n\t\t\tif (mode < 0) {\n\t\t\t\tif (typeof data === \"string\") {\n\t\t\t\t\tif (data.match(NUMERIC_REGEXP)) {\n\t\t\t\t\t\tmode = MODE_NUMERIC;\n\t\t\t\t\t} else if (data.match(ALPHANUMERIC_OUT_REGEXP)) {\n\t\t\t\t\t\tmode = MODE_ALPHANUMERIC;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmode = MODE_OCTET;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmode = MODE_OCTET;\n\t\t\t\t}\n\t\t\t} else if (!(mode === MODE_NUMERIC || mode === MODE_ALPHANUMERIC || mode === MODE_OCTET)) {\n\t\t\t\tthrow \"invalid or unsupported mode\";\n\t\t\t}\n\t\t\tdata = validatedata(mode, data);\n\t\t\tif (data === null) {\n\t\t\t\tthrow \"invalid data format\";\n\t\t\t}\n\t\t\tif (ecclevel < 0 || ecclevel > 3) {\n\t\t\t\tthrow \"invalid ECC level\";\n\t\t\t}\n\t\t\tif (ver < 0) {\n\t\t\t\tfor (ver = 1; ver <= 40; ++ver) {\n\t\t\t\t\tif (data[length] <= getmaxdatalen(ver, mode, ecclevel)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ver > 40) {\n\t\t\t\t\tthrow \"too large data\";\n\t\t\t\t}\n\t\t\t} else if (ver < 1 || ver > 40) {\n\t\t\t\tthrow \"invalid version\";\n\t\t\t}\n\t\t\tif (mask !== -1 && (mask < 0 || mask > 8)) {\n\t\t\t\tthrow \"invalid mask\";\n\t\t\t}\n\t\t\treturn generate(data, ver, mode, ecclevel, mask);\n\t\t},\n\t\t\"generateHTML\": function (data, settings) {\n\t\t\tvar options = settings || {};\n\t\t\tvar fillcolor = options.fillcolor ? options.fillcolor : \"#FFFFFF\";\n\t\t\tvar textcolor = options.textcolor ? options.textcolor : \"#000000\";\n\t\t\tvar matrix = QRCode.generate(data, options);\n\t\t\tvar modsize = Math.max(options.modulesize || 5, 0.5);\n\t\t\tvar margin = Math.max(options.margin !== null ? options.margin : 4, 0.0);\n\t\t\tvar e = document.createElement(\"div\");\n\t\t\tvar n = matrix[length];\n\t\t\tvar html = ['<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"border:' +\n\t\t\t\tmodsize * margin + 'px solid ' + fillcolor + ';background:' + fillcolor + '\">'];\n\t\t\tfor (var i = 0; i < n; ++i) {\n\t\t\t\thtml.push(\"<tr>\");\n\t\t\t\tfor (var j = 0; j < n; ++j) {\n\t\t\t\t\thtml.push('<td style=\"width:' + modsize + 'px;height:' + modsize + 'px' +\n\t\t\t\t\t\t(matrix[i][j] ? ';background:' + textcolor : '') + '\"></td>');\n\t\t\t\t}\n\t\t\t\thtml.push(\"</tr>\");\n\t\t\t}\n\t\t\te.className = \"qrcode\";\n\t\t\t/* e.innerHTML = html.join(\"\") + \"</table>\"; */\n\t\t\tvar range = document.createRange();\n\t\t\trange.selectNodeContents(e);\n\t\t\tvar frag = range.createContextualFragment(html.join(\"\") + \"</table>\");\n\t\t\te.appendChild(frag);\n\t\t\treturn e;\n\t\t},\n\t\t\"generateSVG\": function (data, settings) {\n\t\t\tvar options = settings || {};\n\t\t\tvar fillcolor = options.fillcolor ? options.fillcolor : \"#FFFFFF\";\n\t\t\tvar textcolor = options.textcolor ? options.textcolor : \"#000000\";\n\t\t\tvar matrix = QRCode.generate(data, options);\n\t\t\tvar n = matrix[length];\n\t\t\tvar modsize = Math.max(options.modulesize || 5, 0.5);\n\t\t\tvar margin = Math.max(options.margin ? options.margin : 4, 0.0);\n\t\t\tvar size = modsize * (n + 2 * margin);\n\t\t\t/* var common = ' class= \"fg\"' + ' width=\"' + modsize + '\" height=\"' + modsize + '\"/>'; */\n\t\t\tvar e = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n\t\t\te.setAttributeNS(null, \"viewBox\", \"0 0 \" + size + \" \" + size);\n\t\t\te.setAttributeNS(null, \"style\", \"shape-rendering:crispEdges\");\n\t\t\tvar qrcodeId = \"qrcode\" + Date.now();\n\t\t\te.setAttributeNS(null, \"id\", qrcodeId);\n\t\t\tvar frag = document.createDocumentFragment();\n\t\t\t/* var svg = ['<style scoped>.bg{fill:' + fillcolor + '}.fg{fill:' + textcolor + '}</style>', '<rect class=\"bg\" x=\"0\" y=\"0\"', 'width=\"' + size + '\" height=\"' + size + '\"/>', ]; */\n\t\t\tvar style = document.createElementNS(\"http://www.w3.org/2000/svg\", \"style\");\n\t\t\tstyle.appendChild(document.createTextNode(\"#\" + qrcodeId + \" .bg{fill:\" + fillcolor + \"}#\" + qrcodeId + \" .fg{fill:\" + textcolor + \"}\"));\n\t\t\t/* style.setAttributeNS(null, \"scoped\", \"scoped\"); */\n\t\t\tfrag.appendChild(style);\n\t\t\tvar createRect = function (c, f, x, y, s) {\n\t\t\t\tvar fg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\") || \"\";\n\t\t\t\tfg.setAttributeNS(null, \"class\", c);\n\t\t\t\tfg.setAttributeNS(null, \"fill\", f);\n\t\t\t\tfg.setAttributeNS(null, \"x\", x);\n\t\t\t\tfg.setAttributeNS(null, \"y\", y);\n\t\t\t\tfg.setAttributeNS(null, \"width\", s);\n\t\t\t\tfg.setAttributeNS(null, \"height\", s);\n\t\t\t\treturn fg;\n\t\t\t};\n\t\t\tfrag.appendChild(createRect(\"bg\", \"none\", 0, 0, size));\n\t\t\tvar yo = margin * modsize;\n\t\t\tfor (var y = 0; y < n; ++y) {\n\t\t\t\tvar xo = margin * modsize;\n\t\t\t\tfor (var x = 0; x < n; ++x) {\n\t\t\t\t\tif (matrix[y][x]) {\n\t\t\t\t\t\t/* svg.push('<rect x=\"' + xo + '\" y=\"' + yo + '\"', common); */\n\t\t\t\t\t\tfrag.appendChild(createRect(\"fg\", \"none\", xo, yo, modsize));\n\t\t\t\t\t}\n\t\t\t\t\txo += modsize;\n\t\t\t\t}\n\t\t\t\tyo += modsize;\n\t\t\t}\n\t\t\t/* e.innerHTML = svg.join(\"\"); */\n\t\t\te.appendChild(frag);\n\t\t\treturn e;\n\t\t},\n\t\t\"generatePNG\": function (data, settings) {\n\t\t\tvar options = settings || {};\n\t\t\tvar fillcolor = options.fillcolor || \"#FFFFFF\";\n\t\t\tvar textcolor = options.textcolor || \"#000000\";\n\t\t\tvar matrix = QRCode.generate(data, options);\n\t\t\tvar modsize = Math.max(options.modulesize || 5, 0.5);\n\t\t\tvar margin = Math.max((options.margin !== null && options.margin !== undefined) ? options.margin : 4, 0.0);\n\t\t\tvar n = matrix[length];\n\t\t\tvar size = modsize * (n + 2 * margin);\n\t\t\tvar canvas = document.createElement(\"canvas\"),\n\t\t\tcontext;\n\t\t\tcanvas.width = canvas.height = size;\n\t\t\tcontext = canvas.getContext(\"2d\");\n\t\t\tif (!context) {\n\t\t\t\tthrow \"canvas support is needed for PNG output\";\n\t\t\t}\n\t\t\tcontext.fillStyle = fillcolor;\n\t\t\tcontext.fillRect(0, 0, size, size);\n\t\t\tcontext.fillStyle = textcolor;\n\t\t\tfor (var i = 0; i < n; ++i) {\n\t\t\t\tfor (var j = 0; j < n; ++j) {\n\t\t\t\t\tif (matrix[i][j]) {\n\t\t\t\t\t\tcontext.fillRect(modsize * (margin + j), modsize * (margin + i), modsize, modsize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn canvas.toDataURL();\n\t\t}\n\t};\n\troot.QRCode = QRCode;\n})(\"undefined\" !== typeof window ? window : this, document);\n/*jshint bitwise: true */\n/*jshint shadow: false */\n/*jshint sub: false */\n/*jshint +W041 */\n"]}